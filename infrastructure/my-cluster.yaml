AWSTemplateFormatVersion: '2010-09-09'
Description: Disposable EKS cluster with external cloudflare DBS config
Parameters:
  ClusterName:
    Type: String
    Default: ephemral-cluster
    Description: Name of the EKS Cluster.
  NodeGroupName:
    Type: String
    Default: ephemral-node-group
    Description: Name of the EKS Node Group.
  GpuNodeGroupName:
    Type: String
    Default: ephemral-gpu-node-group
    Description: Name of the EKS GPU Node Group.
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR1:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnetCIDR2:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnetCIDR1:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnetCIDR2:
    Type: String
    Default: 10.0.4.0/24
  PrivateSubnetCIDR3:
    Type: String
    Default: 10.0.5.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-VPC"
        - Key: AccountName
          Value: MyStuff

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-IGW"
        - Key: AccountName
          Value: MyStuff

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet1"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: AccountName
          Value: MyStuff

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet2"
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: AccountName
          Value: MyStuff

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateSubnet1"
        - Key: AccountName
          Value: MyStuff

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateSubnet2"
        - Key: AccountName
          Value: MyStuff

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR3
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateSubnet3"
        - Key: AccountName
          Value: MyStuff

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicRouteTable"
        - Key: AccountName
          Value: MyStuff

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-NatGateway"
        - Key: AccountName
          Value: MyStuff

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateRouteTable"
        - Key: AccountName
          Value: MyStuff

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
        PublicAccessCidrs:
          - 0.0.0.0/0
      Tags:
        - Key: AccountName
          Value: MyStuff

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

  EKSNodeGroupCPU:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref NodeGroupName
      ScalingConfig:
        MinSize: 1
        MaxSize: 1
        DesiredSize: 1
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      InstanceTypes:
        - t3.medium
      CapacityType: SPOT
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Tags:
        AccountName: MyStuff
        CPU: True
        GPU: False
  EKSNodeGroupGPU:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Ref GpuNodeGroupName
      ScalingConfig:
        MinSize: 1
        MaxSize: 1
        DesiredSize: 1
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      InstanceTypes:
        - g4dn.4xlarge
      CapacityType: SPOT
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Tags:
        AccountName: MyStuff
        CPU: False
        GPU: True
Outputs:
  ClusterName:
    Value: !Ref ClusterName
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint