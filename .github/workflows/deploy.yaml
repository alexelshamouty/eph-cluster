name: Deploy stack
on:
  workflow_dispatch:
  push:

concurrency:
  group: deployment
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack and Wait for Completion
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: disposable
          template: infrastructure/my-cluster.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_IAM

  kubernetes-infra:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name ephemral-cluster --region ${{ secrets.AWS_REGION }}
      
      - name: Tag the nodes
        run: |
          bash ./tag-nodes.sh

############################################################################################################
  setup-tenants:
    needs: kubernetes-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name ephemral-cluster --region ${{ secrets.AWS_REGION }}
      
      - name: install helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
### COMMON CONTROLS
    # Setup general nginx
    # It will install in a namespace called common-controls
      - name: Install NGINX Controller General
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          if ! helm list | grep -q "ingress-nginx"; then
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace common-controls --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set fullnameOverride=common-nginx \
              --set controller.ingressClass=common-nginx \
              --set controller.ingressClassResource.name=common-nginx
          fi
      - name: Create CloudFlare Secret
        run: |
          if ! kubectl get secret cloudflare-api-token -n common-controls | grep cloudflare-api-token; then
              kubectl create secret generic cloudflare-api-token \
              --from-literal=api-token=${{ secrets.CLOUD_FLARE_SECRET }} \
              --namespace common-controls
          fi
  ############################################################################################################
    # Setup tech tenant
      - name: Install NGINX Controller Tech tenant
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          if ! helm list -n tech-control | grep -q "ingress-nginx"; then
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace tech-control --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set controller.watchNamespace=tech-app \
              --set fullnameOverride=tech-ingress
          fi

      - name: Create CloudFlare Secret
        run: |
          if ! kubectl get secret cloudflare-api-token -n tech-control | grep cloudflare-api-token; then
              kubectl create secret generic cloudflare-api-token \
              --from-literal=api-token=${{ secrets.CLOUD_FLARE_SECRET }} \
              --namespace tech-control
          fi

      - name: Deploy tech tenant
        run: |
          kubectl apply -f tech-tenant/tech-tenant.yaml
          kubectl apply -f tech-tenant/external-dns.yaml
          kubectl apply -f tech-tenant/tech-tenant-app.yaml
############################################################################################################
    # Setup blue tenant
      - name: Install NGINX Controller Blue
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          if ! helm list -n blue-control | grep -q "ingress-nginx"; then
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace blue-control --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set controller.watchNamespace=blue-app \
              --set fullnameOverride=blue-ingress \
              --set controller.ingressClass=blue-nginx \
              --set controller.ingressClassResource.name=blue-nginx

          fi

      - name: Create CloudFlare Secret
        run: |
          if ! kubectl get secret cloudflare-api-token -n blue-control | grep cloudflare-api-token; then
              kubectl create secret generic cloudflare-api-token \
              --from-literal=api-token=${{ secrets.CLOUD_FLARE_SECRET }} \
              --namespace blue-control
          fi

      - name: Deploy blue tenant
        run: |
          kubectl apply -f blue-tenant/blue-tenant.yaml
          kubectl apply -f blue-tenant/external-dns.yaml
          kubectl apply -f blue-tenant/blue-tenant-app.yaml

############################################################################################################
    # Setup red tenant
      - name: Install NGINX Controller Red
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          if ! helm list -n red-control | grep -q "ingress-nginx"; then
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace red-control --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set controller.watchNamespace=red-app \
              --set fullnameOverride=red-ingress \
              --set controller.ingressClass=red-nginx \
              --set controller.ingressClassResource.name=red-nginx
          fi

      - name: Create CloudFlare Secret
        run: |
          if ! kubectl get secret cloudflare-api-token -n red-control | grep cloudflare-api-token; then
              kubectl create secret generic cloudflare-api-token \
              --from-literal=api-token=${{ secrets.CLOUD_FLARE_SECRET }} \
              --namespace red-control
          fi

      - name: Deploy blue tenant
        run: |
          kubectl apply -f red-tenant/red-tenant.yaml
          kubectl apply -f red-tenant/external-dns.yaml
          kubectl apply -f red-tenant/red-tenant-app.yaml