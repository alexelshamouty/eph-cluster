name: Deploy stack
on:
  workflow_dispatch:
  push:

concurrency:
  group: deployment
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack and Wait for Completion
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: disposable
          template: my-cluster.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_IAM

  kubernetes-infra:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name ephemral-cluster --region ${{ secrets.AWS_REGION }}
      
      - name: deploy tenant
        run: |
          kubectl apply -f tech-tenant.yaml 

      - name: install helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install NGINX Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          if ! helm list -n tech-control | grep -q "ingress-nginx"; then
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace tech-control --create-namespace \
              --set controller.service.type=LoadBalancer \
              --set controller.watchNamespace=tech-app
          fi      
      - name: Create CloudFlare Secret
        run: |
          kubectl create secret generic cloudflare-api-token \
          --from-literal=api-token=${{ secrets.CLOUD_FLARE_SECRET }} \
          --namespace tech-control

      - name: Deploy external dns
        run: 
          kubectl apply -f external-dns.yaml

      - name: deploy application
        run: |
          kubectl apply -f tech-tenant-app.yaml 
